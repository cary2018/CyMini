<?php/** * Created by PhpStorm. * CreateTime  : 2023/07/24 16:46 * file name : index.php * User: asusa * Author: Hyy-Cary * Contact QQ  : 373889161(.) * email: 373889161@qq.com * WeChat: 18319021313 */namespace app\installs\controller;use app\BaseController;use think\facade\Config;use think\facade\View;use think\facade\Db;class index extends BaseController{    public function index(){        $config = [            'os'=>PHP_OS,            'php'=>PHP_VERSION,        ];        $dirFile = [            ['./install/','读写','读写'],            ['./uploads/','读写','读写'],            ['./../.env','读写','读写'],            ['./../config/web.php','读写','读写'],            ['./../config/database.php','读写','读写'],        ];        $fun = [            ['pdo','类','支持'],            ['gd','类','支持'],            ['pdo_mysql','模块','支持'],            ['fileinfo','模块','支持'],            ['curl','模块','支持'],            ['file_get_contents','函数','支持'],            ['mb_strlen','函数','支持'],        ];        foreach ($fun as &$fv){            if(!class_exists($fv[0]) && !extension_loaded($fv[0]) && !function_exists($fv[0])){                $fv[2] = '不支持';            }        }        foreach ($dirFile as &$v){            if(!is_writeable($v[0])){                $v[2] = '不可读写';            }        }        View::assign('config',$config);        View::assign('dir',$dirFile);        View::assign('fun',$fun);        if(is_file(public_path().'install/install.lock')){            return '重新安装，请先删除：/install/install.lock';        }        return View();    }    public function dataService(){        $data = request()->param();        $env = <<<infoAPP_DEBUG = false[APP]DEFAULT_TIMEZONE = Asia/Shanghai[DATABASE]TYPE = mysqlHOSTNAME = {$data['service']}DATABASE = {$data['database']}USERNAME = {$data['username']}PASSWORD = {$data['password']}HOSTPORT = {$data['hostport']}CHARSET = utf8DEBUG = true[LANG]default_lang = zh-cninfo;        $config = <<<info<?phpreturn [    // 默认使用的数据库连接配置    'default'         => env('database.driver', 'mysql'),    // 自定义时间查询规则    'time_query_rule' => [],    // 自动写入时间戳字段    // true为自动识别类型 false关闭    // 字符串则明确指定时间字段类型 支持 int timestamp datetime date    'auto_timestamp'  => true,    // 时间字段取出后的默认时间格式    'datetime_format' => 'Y-m-d H:i:s',    // 数据库连接配置信息    'connections'     => [        'mysql' => [            // 数据库类型            'type'            => env('database.type', 'mysql'),            // 服务器地址            'hostname'        => env('database.hostname', '{$data['service']}'),            // 数据库名            'database'        => env('database.database', '{$data['database']}'),            // 用户名            'username'        => env('database.username', '{$data['username']}'),            // 密码            'password'        => env('database.password', '{$data['password']}'),            // 端口            'hostport'        => env('database.hostport', '{$data['hostport']}'),            // 数据库连接参数            'params'          => [],            // 数据库编码默认采用utf8            'charset'         => env('database.charset', 'utf8'),            // 数据库表前缀            'prefix'          => env('database.prefix', '{$data['prefix']}'),            // 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器)            'deploy'          => 0,            // 数据库读写是否分离 主从式有效            'rw_separate'     => false,            // 读写分离后 主服务器数量            'master_num'      => 1,            // 指定从服务器序号            'slave_no'        => '',            // 是否严格检查字段是否存在            'fields_strict'   => true,            // 是否需要断线重连            'break_reconnect' => false,            // 监听SQL            'trigger_sql'     => env('app_debug', true),            // 开启字段缓存            'fields_cache'    => false,        ],        // 更多的数据库配置信息    ],];info;        file_put_contents(root_path().'.env',$env);        file_put_contents(root_path().'config/database.php',$config);        sleep(1);        // 判断数据库是否连接成功        try {            if (!is_writable(root_path().'config/web.php')) {                $msg = ['code'=>300,'msg'=>'./../config/web.php-->无读写权限'];                return json_encode($msg,JSON_UNESCAPED_UNICODE);            }            if (!is_writable(root_path().'config/database.php')) {                $msg = ['code'=>300,'msg'=>'./../config/database.php-->无读写权限'];                return json_encode($msg,JSON_UNESCAPED_UNICODE);            }            if (!is_writable(root_path().'.env')) {                $msg = ['code'=>300,'msg'=>'./../.env-->无读写权限'];                return json_encode($msg,JSON_UNESCAPED_UNICODE);            }            $db_connect = Db::connect();            $db_connect->execute('select version()');            $database = $data['database'];            // 不覆盖检测是否已存在数据库            if (!$data['cover']) {                $check = $db_connect->execute('SELECT * FROM information_schema.schemata WHERE schema_name="'.$database.'"');                if ($check) {                    $msg = ['code'=>200,'msg'=>'该数据库已存在，可直接安装。如需覆盖，请选择覆盖数据库！'];                    return json_encode($msg,JSON_UNESCAPED_UNICODE);                }            }            // 创建数据库            if (!$db_connect->execute("CREATE DATABASE IF NOT EXISTS `{$database}` DEFAULT CHARACTER SET utf8")) {                $msg = ['code'=>300,'msg'=>'数据库连接失败！'];                return json_encode($msg,JSON_UNESCAPED_UNICODE);            }            $msg = ['code'=>200,'msg'=>'数据库连接成功！'];            return json_encode($msg,JSON_UNESCAPED_UNICODE);        } catch (\Exception $e) {            $msg = ['code'=>300,'msg'=>'数据库连接失败：' . $e->getMessage()];            return json_encode($msg,JSON_UNESCAPED_UNICODE);        }    }    public function install(){        $data = request()->param();        try{            $db_connect = Db::connect();            $db_connect->execute('select version()');            $sql_file = public_path().'install/cy_admin.sql';            if (file_exists($sql_file)) {                $sql = file_get_contents($sql_file);                $sql_list = mac_parse_sql($sql, 0, ['cy_' => Config::get('database.connections.mysql.prefix')]);                if ($sql_list) {                    $sql_list = array_filter($sql_list);                    foreach ($sql_list as $v) {                        try {                            $db_connect->execute($v);                        } catch(\Exception $e) {                            return json_encode(['code'=>300,'msg'=>$e->getMessage()],JSON_UNESCAPED_UNICODE);                        }                    }                }            }            if($data['username'] && $data['password']){                $data['password'] = PasswordSet($data['password']);                $data['isAdmin'] = 1;                $data['createTime'] = time();                $data['updateTime'] = time();                SaveAt('admin',$data);            }else{                $msg = ['code'=>300,'msg'=>'必填项不能为空！'];                return json_encode($msg,JSON_UNESCAPED_UNICODE);            }            file_put_contents(public_path().'install/install.lock',date('Y-m-d H:i:s'));            $msg = ['code'=>200,'msg'=>'安装成功！'];            return json_encode($msg,JSON_UNESCAPED_UNICODE);        }catch(\Exception $e){            $msg = ['code'=>300,'msg'=>'数据库连接失败：' . $e->getMessage()];            return json_encode($msg,JSON_UNESCAPED_UNICODE);        }    }    public function test(){        phpinfo();    }}